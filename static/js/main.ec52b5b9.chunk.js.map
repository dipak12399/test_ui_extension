{"version":3,"sources":["../node_modules/contentful-ui-extensions-sdk/dist sync","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","App","props","detachExternalChangeHandler","onExternalChange","value","setState","onChange","currentTarget","sdk","field","setValue","removeValue","state","getValue","error","hasLoaded","items","this","window","startAutoResizer","onValueChanged","fetch","then","res","json","name","labelText","helpText","map","item","key","toString","React","Component","init","ReactDOM","render","document","getElementById"],"mappings":"yGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,8LCoBnBC,G,gEAOJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAHRC,4BAA8B,KAEX,EA0CnBC,iBAAmB,SAAAC,GACjB,EAAKC,SAAS,CAAED,WA3CC,EA8CnBE,SAAW,SAAAd,GACT,IAAMY,EAAQZ,EAAEe,cAAcH,MAC9B,EAAKC,SAAS,CAAED,UACZA,EACF,EAAKH,MAAMO,IAAIC,MAAMC,SAASN,GAE9B,EAAKH,MAAMO,IAAIC,MAAME,eAlDvB,EAAKC,MAAQ,CACXR,MAAOH,EAAMO,IAAIC,MAAMI,WACvBC,OAAO,EACPC,WAAW,EACXC,MAAO,IANQ,E,gEAUE,IAAD,OAClBC,KAAKhB,MAAMO,IAAIU,OAAOC,mBAGtBF,KAAKf,4BAA8Be,KAAKhB,MAAMO,IAAIC,MAAMW,eACtDH,KAAKd,kBAGPkB,MAAM,eACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACN,GACC,EAAKX,SAAS,CACZU,WAAW,EACXC,aAGJ,SAACF,GACC,EAAKT,SAAS,CACZU,WAAW,EACXD,MAAOA,S,6CAOXG,KAAKf,6BACPe,KAAKf,gC,+BAoBP,OAAKe,KAAKL,MAAMG,UAKd,kBAAC,cAAD,CACEhB,GAAG,QACH0B,KAAK,QACLC,UAAU,cACVC,SAAS,2CACTvB,MAAOa,KAAKL,MAAMR,MAClBE,SAAUW,KAAKX,UAEf,kBAAC,SAAD,CAAQF,MAAM,IAAd,eACCa,KAAKL,MAAMI,MAAMY,KAAI,SAAAC,GACpB,OAAO,kBAAC,SAAD,CAAQC,IAAKD,EAAK9B,GAAIK,MAAOyB,EAAK9B,GAAGgC,YAAaF,EAAKJ,UAd3D,kBAAC,UAAD,U,GAlEKO,IAAMC,YAuFxBC,gBAAK,SAAA1B,GACH2B,IAASC,OAAO,kBAACpC,EAAD,CAAKQ,IAAKA,IAAS6B,SAASC,eAAe,c","file":"static/js/main.ec52b5b9.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 100;","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport 'whatwg-fetch';\nimport { SelectField, Spinner, Option } from '@contentful/forma-36-react-components/dist/index';\nimport { init } from 'contentful-ui-extensions-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport './index.css';\n\nclass App extends React.Component {\n  static propTypes = {\n    sdk: PropTypes.object.isRequired,\n  };\n\n  detachExternalChangeHandler = null;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.sdk.field.getValue(),\n      error: false,\n      hasLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.sdk.window.startAutoResizer();\n\n    // Handler for external field value changes (e.g. when multiple authors are working on the same entry).\n    this.detachExternalChangeHandler = this.props.sdk.field.onValueChanged(\n      this.onExternalChange\n    );\n\n    fetch(\"./data.json\")\n      .then(res => res.json())\n      .then(\n        (items) => {\n          this.setState({\n            hasLoaded: true,\n            items\n          });\n        },\n        (error) => {\n          this.setState({\n            hasLoaded: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  componentWillUnmount() {\n    if (this.detachExternalChangeHandler) {\n      this.detachExternalChangeHandler();\n    }\n  }\n\n  onExternalChange = value => {\n    this.setState({ value });\n  };\n\n  onChange = e => {\n    const value = e.currentTarget.value;\n    this.setState({ value });\n    if (value) {\n      this.props.sdk.field.setValue(value);\n    } else {\n      this.props.sdk.field.removeValue();\n    }\n  };\n\n  render() {\n\n    if (!this.state.hasLoaded) {\n      return <Spinner />;\n    }\n\n    return (\n      <SelectField\n        id=\"names\"\n        name=\"names\"\n        labelText=\"Select name\"\n        helpText=\"Get dummy user data from an external API\"\n        value={this.state.value}\n        onChange={this.onChange}\n      >\n        <Option value=\"\">Pick a user</Option>\n        {this.state.items.map(item => {\n          return <Option key={item.id} value={item.id.toString()}>{item.name}</Option>\n        })}\n      </SelectField>\n    );\n  }\n}\n\ninit(sdk => {\n  ReactDOM.render(<App sdk={sdk} />, document.getElementById('root'));\n});\n\n// Enabling hot reload\nif (module.hot) {\n  module.hot.accept();\n}"],"sourceRoot":""}